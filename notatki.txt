mamy liste i chcemy policzyc ile jest w niej elementow

lista.toSeq.groupBy(identity).mapValues(_.size).toList


dodawanie do siebie list albo setow
l1 ++ l2
usuwanie z l1 el. l2
l1 -- l2

set.intersect(anotherset) - czesc wspolna


import scala.io.Source
    val dane = Source.fromFile("temperatury.txt")
    .getLines
    .toList
    .map(p => p.split(" ").toList)



distinct - unique elements - dziala na stringi i listy



CASES:
jak chcesz head i last miec:
case head :: (mid:+last)

intersect

.flatten


def isPrime(i :Int) : Boolean = {
    if (i <= 1)
      false
    else if (i == 2)
      true
    else
      !(2 to (i-1)).exists(x => i % x == 0)
}


https://www.scala-lang.org/api/2.13.3/scala/collection/immutable/List.html


val system = ActorSystem("system")
val aktor = context.actorOf(Props[Zamek](), "zamek1")







-----------ZADANIE1
import akka.actor._

object Zad1 {

  case class Start(n: Int, m: Int, kumulator: ActorRef)
  case class Wyniki(x: List[Float])
  case object Generuj

  class Manager extends Actor {
    def receive: Receive = {
      case Start(n: Int, m: Int, kumulator: ActorRef) => {
        val pracownicy = (1 to n).map(x => context.actorOf(Props[Pracownik](), s"pracownik$x")).toList
        pracownicy.foreach(x => x ! Generuj)
        context.become(zbieranieWynikow(n,m,kumulator, List(), List(), pracownicy))
      }
    }
    def zbieranieWynikow(n: Int, m: Int, kumulator: ActorRef, wspolrzedne: List[(Float,Float)], wyniki: List[Float], pracownicy: List[ActorRef]): Receive = {
      case (x: Float, y: Float) => {
        if (((wspolrzedne.length) < (n-1)) && ((wyniki.length) < (m))){
          context.become(zbieranieWynikow(n, m, kumulator, (x,y) :: wspolrzedne, wyniki, pracownicy: List[ActorRef]))
        } else if (wspolrzedne.length == n-1 && wyniki.length < m-1) {
          val stosunek = ((x,y)::wspolrzedne).foldLeft(0)((akum, elem) => {
          if (math.sqrt((elem._1*elem._1)+(elem._2*elem._2)) <= 1){
            akum+1
          } else {
            akum
          }
        })/(n.toFloat)
        pracownicy.foreach(x => x ! Generuj)
        context.become(zbieranieWynikow(n, m, kumulator, List(), stosunek::wyniki, pracownicy: List[ActorRef]))
        } else if (wspolrzedne.length == n-1 && wyniki.length == m-1){
          val stosunek = ((x,y)::wspolrzedne).foldLeft(0)((akum, elem) => {
          if (math.sqrt((elem._1*elem._1)+(elem._2*elem._2)) <= 1){
            akum+1
          } else {
            akum
          }
        })/(n.toFloat)
        kumulator ! Wyniki((stosunek::wyniki).map(x => x*4))
        }
      } 
    }
  }

  class Pracownik extends Actor {
    def receive: Receive = {
      case Generuj => {
        sender() ! (scala.util.Random.nextFloat().toFloat, scala.util.Random.nextFloat().toFloat)
      }
    }
  }

  class KumulatorWyniku extends Actor {
    def receive: Receive = {
      case Wyniki(x: List[Float]) => println(x.sum/x.length)
    }
  }

  def main(args: Array[String]): Unit = {
    val r = scala.util.Random
    val system = ActorSystem("zad1")
    val manager = system.actorOf(Props[Manager](), "manager")
    val kumulator = system.actorOf(Props[KumulatorWyniku](), "kumulator")
    manager ! Start(1000, 15, kumulator)
    // r jest „generatorem”, którego należy użyć do generowania wartości
    // losowych różnych typów (i zakresów) np.
    // r.nextInt (zwraca pseudolosową liczbę całkowitą z zakresu od 0 do 1),
    // r.nextInt(100) (zwraca pseudolosową liczbę całkowitą z zakresu od 0 do 99),
    // r.nextFloat (zwraca pseudolosową liczbę zmiennoprzecinkową z zakresu od 0 do 1).

    // wyliczenie pierwiastka z liczby 4: math.sqrt(4)
  }

}
